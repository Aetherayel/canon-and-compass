---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import TopLayout from "@layouts/TopLayout.astro";
import BottomLayout from "@layouts/BottomLayout.astro";
import ArticleTopLayout from "@layouts/ArticleTopLayout.astro";
import ArticleBottomLayout from "@layouts/ArticleBottomLayout.astro";
import ManualButtons from "@components/ManualButtons.astro";

export async function getStaticPaths() {
  const foundations = await getCollection("foundations-of-discernment");
  return foundations.map((note) => ({
    params: { slug: note.slug },
    props: note,
  }));
}

type Props = CollectionEntry<"foundations-of-discernment">;
const foundation = Astro.props;
const { title, summary } = foundation.data;

// Compute prev/next by day within the collection
const all = (await getCollection("foundations-of-discernment"))
  .filter((x) => !(x.data as any)?.draft)
  .sort((a, b) => {
    const da = Number((a.data as any)?.day ?? 0);
    const db = Number((b.data as any)?.day ?? 0);
    return da - db;
  });
const currentIndex = all.findIndex((x) => x.slug === foundation.slug);
const prev = currentIndex > 0 ? all[currentIndex - 1] : undefined;
const next = currentIndex >= 0 && currentIndex < all.length - 1 ? all[currentIndex + 1] : undefined;
---

<PageLayout title={title} description={summary}>
  <TopLayout>
    <div class="animate">
      <ArticleTopLayout entry={foundation} />
    </div>
  </TopLayout>
  <BottomLayout>
    <div class="animate">
      <ArticleBottomLayout entry={foundation} />
    </div>
    <ManualButtons
      prevHref={prev ? `/${prev.collection}/${prev.slug}` : undefined}
      prevLabel={prev?.data.title}
      prevType={prev && (prev.data as any)?.day ? `Day ${(prev.data as any).day}` : undefined}
      nextHref={next ? `/${next.collection}/${next.slug}` : undefined}
      nextLabel={next?.data.title}
      nextType={next && (next.data as any)?.day ? `Day ${(next.data as any).day}` : undefined}
    />
  </BottomLayout>
</PageLayout>
