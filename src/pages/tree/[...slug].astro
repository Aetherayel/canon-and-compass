---
import { type CollectionEntry, getCollection } from "astro:content"
import PageLayout from "@layouts/PageLayout.astro"
import TopLayout from "@layouts/TopLayout.astro"
import BottomLayout from "@layouts/BottomLayout.astro"
import ArticleTopLayout from "@layouts/ArticleTopLayout.astro"
import ArticleBottomLayout from "@layouts/ArticleBottomLayout.astro"
import PathwayLinks from "@components/PathwayLinks.astro";

// Create the static tree pages
export async function getStaticPaths() {
        const posts = await getCollection("tree")
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}))
}

// Get the requested post
type Props = CollectionEntry<"tree">
const post = Astro.props
const { title, summary } = post.data
// Resolve pathway by matching this tree's slug in the pathways map
const pathways = await getCollection('pathways');
const treePath = pathways.find((p) => (p.data as any)?.tree?.slug === post.slug)?.id as string | undefined;
---

<PageLayout title={title} description={summary}>
  <TopLayout>
    <div class="animate">
      <ArticleTopLayout entry={post}/>
    </div>
  </TopLayout>
  <BottomLayout>
    <div class="animate">
      <ArticleBottomLayout entry={post} />
    </div>
    {treePath && (
      <div class="mt-8">
        <PathwayLinks id={treePath} currentType="tree" />
      </div>
    )}
  </BottomLayout>
</PageLayout>
