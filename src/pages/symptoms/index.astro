---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import TopLayout from "@layouts/TopLayout.astro";
import BottomLayout from "@layouts/BottomLayout.astro";
import { SYMPTOMS } from "@consts";
import SymptomArrowCard from "@components/SymptomArrowCard.astro";

// Pull symptoms from the content collection
const entries = await getCollection("symptoms");
const symptoms = entries
  .map((e) => ({ id: e.id, ...e.data }))
  .sort((a, b) => a.fruit.localeCompare(b.fruit));
---

<PageLayout title={SYMPTOMS.TITLE} description={SYMPTOMS.DESCRIPTION}>
  <TopLayout>
    <div class="animate page-heading">
      {SYMPTOMS.TITLE}
    </div>

    <p class="mt-3 text-balance text-lg text-zinc-600 dark:text-zinc-400 max-w-prose">
      Pick what you’re feeling. We’ll trace it down the trunk to the root—and point you to the
      <a href="/truth" class="link-fade text-indigo-600 dark:text-indigo-400">Truth Tree</a>
      that re‑roots the story.
    </p>

    <!-- Filter -->
    <div class="mt-6 max-w-xl">
      <label for="symptom-search" class="sr-only">Filter symptoms</label>
      <input
        id="symptom-search"
        type="search"
        placeholder="Filter by symptom or tag…"
        class="w-full rounded-full px-5 py-3 bg-white dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 text-base"
        data-ctrl="filter"
      />
    </div>
  </TopLayout>

  <BottomLayout>
    <!-- Grid -->
    <ul id="symptom-grid" class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
      {symptoms.map((it) => (
        <li
          data-tags={it.tags.join(" ").toLowerCase()}
          data-fruit={it.fruit.toLowerCase()}
        >
          <SymptomArrowCard
            fruit={it.fruit}
            blurb={it.blurb}
            tags={it.tags}
            href={it.systemHref}
            pillLabel={it.systemLabel}
          />
        </li>
      ))}
    </ul>
  </BottomLayout>
</PageLayout>

<script is:inline>
  // Tiny client-side filter (keeps your layouts/components untouched)
  const q = document.querySelector('[data-ctrl="filter"]');
  const items = Array.from(document.querySelectorAll('#symptom-grid > li'));
  function applyFilter() {
    const v = (q.value || "").toLowerCase().trim();
    items.forEach((el) => {
      const hay = (el.dataset.fruit + " " + el.dataset.tags).toLowerCase();
      el.style.display = v && !hay.includes(v) ? "none" : "";
    });
  }
  q?.addEventListener('input', applyFilter);
</script>